1. junit - 웹 서버 없이 실행되는 프로그램
	- main메소드 없이도 어노테이션 기반으로 실행 가능(관련 라이브러리 필수)

1-1. 실행 단계
	Test 실행 - sql문장 자동 생성
		1. table 여부 확인 후 자동 생성
		2. console창에 drop & create 기록 
		3. 2번째 실행시에는 콘솔창에 에러 없이 실행 - 존재하는 table 삭제 -> table 생성(에러 뜨는 이유 : 없는 테이블을 삭제해서)
1-2. 장점
	- 개발 코드가 간소화, 개발 비용 절감
	- 표준화
	- table 설계가 변경될 경우에 sql문장 새로 구성할 필요없이 자바 소스 부분만 수정해서 활용
1-3. 단점
	- 복잡한 sql 문장인 경우 구현 쉽지 않음
	- 복잡한 sql문장은 JDBC 혼용해서 JPA 활용
	- 배우기가 매우 어렵다

------------------------------------------------------------------------------------------------------------------------------------------------------------
1. JPA API - ORM
	1. @Entity 
		- table로 매핑되는 자바 클래스 
		- 미 존재했던 TABLE인 경우 자동 생성
		- 설정만으로 자동 생성되는 sql문장 확인
		- persistence.xml에 등록
	2. @Id	
		- pk 설정
		- Entity 클래스 내부에 멤버 변수 선언구에 설정 (필수)
		
	3. @Column
		- 멤버 변수와 매핑되는 table 개별  컬럼들 설정
		- 변수명과 동일, 변수명과 다르게 설정, 컬럼의 정보를 속성 정보(속석명=값)로 보유
		- @Column(name="name")	
		- @Column(name="?", precision=?) 길이조절 - 숫자인 경우
		- @Column(name="?", length=?) 길이조절 - 문자인 경우
		
2. JPA 설정 파일 
	1. META-INF 디렉토리에 내장
	2. 보유 정보
		1. 어떤 클래스가 TABLE화 하고자 하는 entity 클래스인가
			<class>step01.entity.Customer</class>
			<class>step01.entity.Member</class>
		
		2. 사용 db의 접속 정보
			<property name="javax.persistence.jdbc.driver" value="oracle.jdbc.OracleDriver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
			<property name="javax.persistence.jdbc.user" value="SCOTT" />
			<property name="javax.persistence.jdbc.password" value="TIGER" />

			<property name="hibernate.dialect" value="org.hibernate.dialect.OracleDialect" />
			
		3. 실행시 jpa가 자동 생성해주는 sql문장 확인 여부에 대한 설정
			1. 개발자 및 관리자 측면에서 확인하기 위한 설정
				<!-- console창에 sql 문장 출력 -->
				<property name="hibernate.show_sql" value="true" />
				
				<!--  가독성 -->
				<property name="hibernate.format_sql" value="true" />
				
				<!-- entity와 sql 부연 설명 -->
				<property name="hibernate.use_sql_comments" value="true" />
			
			2. 실행시 마다 table 생성 또는 활용에 대한 설정
				<property name="hibernate.hbm2ddl.auto" value="create or none" />

	
3. 개발 단계
	1단계 : project 생성
		maven & jpa 프로젝트화
		
	2단계 : persistence.xml 파일의 내용을 oracle db에 맞게 구성
	
	
	3단계 : entity 클래스 개발
	
		dept01
			deptno/dname/loc
			
	4단계 : 실행 클래스 개발
		JPA 스펙에 맞게 단계별 개발
		1단계 : EntityManagerFactory
		2단계 : EntityManager
		3단계 : EntityManager의 개별 메소드로 crud

4. 중요한점
	- persist 저장
	- commit 해야 적용

5. 시퀀스 생성
	@GeneratedValue(strategy=GenerationType.SEQUENCE) //시퀀스 반영하는 방법
	@SequenceGenerator(name="MEMBER_SEQ_GEN", sequenceName="MEMBER_SEQ", initialValue=1, allocationSize=50)

6. 조인 방법
	@OneToOne
	@JoinColumn(name="team_id")
	private Team teamId;